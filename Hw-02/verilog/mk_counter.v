//
// Generated by Bluespec Compiler, version 2024.07-22-g934465e3 (build 934465e3)
//
// On Fri Feb  7 15:35:11 EST 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_start                   O     1 const
// ma_stop                        O    32 reg
// RDY_ma_stop                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_start_count_up              I     1
// EN_ma_start                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_counter(CLK,
		  RST_N,

		  ma_start_count_up,
		  EN_ma_start,
		  RDY_ma_start,

		  ma_stop,
		  RDY_ma_stop);
  input  CLK;
  input  RST_N;

  // action method ma_start
  input  ma_start_count_up;
  input  EN_ma_start;
  output RDY_ma_start;

  // value method ma_stop
  output [31 : 0] ma_stop;
  output RDY_ma_stop;

  // signals for module outputs
  wire [31 : 0] ma_stop;
  wire RDY_ma_start, RDY_ma_stop;

  // register rg_count
  reg [31 : 0] rg_count;
  wire [31 : 0] rg_count$D_IN;
  wire rg_count$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_decr,
       CAN_FIRE_RL_rl_incr,
       CAN_FIRE_ma_start,
       WILL_FIRE_RL_rl_decr,
       WILL_FIRE_RL_rl_incr,
       WILL_FIRE_ma_start;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_rg_count$write_1__VAL_1, MUX_rg_count$write_1__VAL_2;

  // action method ma_start
  assign RDY_ma_start = 1'd1 ;
  assign CAN_FIRE_ma_start = 1'd1 ;
  assign WILL_FIRE_ma_start = EN_ma_start ;

  // value method ma_stop
  assign ma_stop = rg_count ;
  assign RDY_ma_stop = 1'd1 ;

  // rule RL_rl_incr
  assign CAN_FIRE_RL_rl_incr = EN_ma_start && ma_start_count_up ;
  assign WILL_FIRE_RL_rl_incr = CAN_FIRE_RL_rl_incr ;

  // rule RL_rl_decr
  assign CAN_FIRE_RL_rl_decr = EN_ma_start && !ma_start_count_up ;
  assign WILL_FIRE_RL_rl_decr = CAN_FIRE_RL_rl_decr && !WILL_FIRE_RL_rl_incr ;

  // inputs to muxes for submodule ports
  assign MUX_rg_count$write_1__VAL_1 = rg_count + 32'd1 ;
  assign MUX_rg_count$write_1__VAL_2 = rg_count - 32'd1 ;

  // register rg_count
  assign rg_count$D_IN =
	     WILL_FIRE_RL_rl_incr ?
	       MUX_rg_count$write_1__VAL_1 :
	       MUX_rg_count$write_1__VAL_2 ;
  assign rg_count$EN = WILL_FIRE_RL_rl_incr || WILL_FIRE_RL_rl_decr ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (rg_count$EN) rg_count <= `BSV_ASSIGNMENT_DELAY rg_count$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_count = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_start) $display("counting is up? %0d", ma_start_count_up);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_incr)
	$display("value in reg is: %0d", $signed(rg_count));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decr)
	$display("value in reg is: %0d", $signed(rg_count));
  end
  // synopsys translate_on
endmodule  // mk_counter

