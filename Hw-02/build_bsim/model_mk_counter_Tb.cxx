/*
 * Generated by Bluespec Compiler, version 2024.07-22-g934465e3 (build 934465e3)
 * 
 * On Fri Feb  7 15:27:13 EST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "model_mk_counter_Tb.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mk_counter_Tb::MODEL_mk_counter_Tb()
{
  mk_counter_Tb_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mk_counter_Tb()
{
  MODEL_mk_counter_Tb *model = new MODEL_mk_counter_Tb();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mk_counter_Tb &INST_top = *((MOD_mk_counter_Tb *)(instance_ptr));
	 tUInt8 DEF_INST_top_INST_count_DEF_CAN_FIRE_RL_rl_incr;
	 tUInt8 DEF_INST_top_INST_count_DEF_WILL_FIRE_RL_rl_incr;
	 tUInt8 DEF_INST_top_INST_count_DEF_CAN_FIRE_RL_rl_decr;
	 tUInt8 DEF_INST_top_INST_count_DEF_WILL_FIRE_RL_rl_decr;
	 tUInt8 DEF_INST_top_DEF_rg_counter_tb_SLT_10___d2;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_rl_start_count;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_rl_start_count;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_rl_decrement;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_rl_decrement;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_rl_finish;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_rl_finish;
	 INST_top.INST_count.METH_RDY_ma_start();
	 INST_top.DEF_b__h115 = INST_top.INST_rg_counter_tb.METH_read();
	 DEF_INST_top_DEF_rg_counter_tb_SLT_10___d2 = primSLT8(1u,
							       32u,
							       (tUInt32)(INST_top.DEF_b__h115),
							       32u,
							       10u);
	 DEF_INST_top_DEF_CAN_FIRE_RL_rl_decrement = !DEF_INST_top_DEF_rg_counter_tb_SLT_10___d2 && primSLT8(1u,
													     32u,
													     (tUInt32)(INST_top.DEF_b__h115),
													     32u,
													     15u);
	 DEF_INST_top_DEF_WILL_FIRE_RL_rl_decrement = DEF_INST_top_DEF_CAN_FIRE_RL_rl_decrement;
	 DEF_INST_top_DEF_CAN_FIRE_RL_rl_finish = (INST_top.DEF_b__h115) == 15u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_rl_finish = DEF_INST_top_DEF_CAN_FIRE_RL_rl_finish;
	 DEF_INST_top_DEF_CAN_FIRE_RL_rl_start_count = DEF_INST_top_DEF_rg_counter_tb_SLT_10___d2;
	 DEF_INST_top_DEF_WILL_FIRE_RL_rl_start_count = DEF_INST_top_DEF_CAN_FIRE_RL_rl_start_count;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_rl_decrement)
	   INST_top.RL_rl_decrement();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_rl_finish)
	   INST_top.RL_rl_finish();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_rl_start_count)
	   INST_top.RL_rl_start_count();
	 DEF_INST_top_INST_count_DEF_CAN_FIRE_RL_rl_incr = INST_top.INST_count.INST_wr_incr.METH_whas();
	 DEF_INST_top_INST_count_DEF_WILL_FIRE_RL_rl_incr = DEF_INST_top_INST_count_DEF_CAN_FIRE_RL_rl_incr;
	 DEF_INST_top_INST_count_DEF_CAN_FIRE_RL_rl_decr = INST_top.INST_count.INST_wr_decr.METH_whas();
	 DEF_INST_top_INST_count_DEF_WILL_FIRE_RL_rl_decr = DEF_INST_top_INST_count_DEF_CAN_FIRE_RL_rl_decr && !DEF_INST_top_INST_count_DEF_WILL_FIRE_RL_rl_incr;
	 if (DEF_INST_top_INST_count_DEF_WILL_FIRE_RL_rl_decr)
	   INST_top.INST_count.RL_rl_decr();
	 if (DEF_INST_top_INST_count_DEF_WILL_FIRE_RL_rl_incr)
	   INST_top.INST_count.RL_rl_incr();
	 INST_top.INST_count.INST_wr_decr.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_count.INST_wr_incr.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_count.INST_rg_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rg_counter_tb.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mk_counter_Tb::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mk_counter_Tb_instance = new MOD_mk_counter_Tb(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mk_counter_Tb_instance->INST_count.INST_wr_incr.set_clk_0)("CLK");
  (mk_counter_Tb_instance->INST_count.INST_wr_decr.set_clk_0)("CLK");
  (mk_counter_Tb_instance->INST_count.set_clk_0)("CLK");
  (mk_counter_Tb_instance->set_clk_0)("CLK");
}
void MODEL_mk_counter_Tb::destroy_model()
{
  delete mk_counter_Tb_instance;
  mk_counter_Tb_instance = NULL;
}
void MODEL_mk_counter_Tb::reset_model(bool asserted)
{
  (mk_counter_Tb_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mk_counter_Tb::get_instance()
{
  return mk_counter_Tb_instance;
}

/* Fill in version numbers */
void MODEL_mk_counter_Tb::get_version(char const **name, char const **build)
{
  *name = "2024.07-22-g934465e3";
  *build = "934465e3";
}

/* Get the model creation time */
time_t MODEL_mk_counter_Tb::get_creation_time()
{
  
  /* Fri Feb  7 20:27:13 UTC 2025 */
  return 1738960033llu;
}

/* State dumping function */
void MODEL_mk_counter_Tb::dump_state()
{
  (mk_counter_Tb_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mk_counter_Tb & mk_counter_Tb_backing(tSimStateHdl simHdl)
{
  static MOD_mk_counter_Tb *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mk_counter_Tb(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mk_counter_Tb::dump_VCD_defs()
{
  (mk_counter_Tb_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mk_counter_Tb::dump_VCD(tVCDDumpType dt)
{
  (mk_counter_Tb_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mk_counter_Tb_backing(sim_hdl));
}
