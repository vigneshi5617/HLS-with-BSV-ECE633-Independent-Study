/*
 * Generated by Bluespec Compiler, version 2024.07-22-g934465e3 (build 934465e3)
 * 
 * On Wed Feb  5 20:12:58 EST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestbench.h"


/* String declarations */
static std::string const __str_literal_2("Assigning values: (10, 20, 30)", 30u);
static std::string const __str_literal_3("Computed Answer: %d (Expected: 60)", 34u);
static std::string const __str_literal_8("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_np] and\n  [RL_action_l27c16, RL_action_np_1, RL_action_l33c9, RL_action_l35c9] ) fired\n  in the same clock cycle.\n",
					 218u);
static std::string const __str_literal_10("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_np_1] and\n  [RL_action_l33c9, RL_action_l35c9] ) fired in the same clock cycle.\n",
					  184u);
static std::string const __str_literal_5("Error: \"src_bsv/Testbench.bsv\", line 17, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l17c9] and\n  [RL_action_l20c9, RL_action_l21c12, RL_action_np, RL_action_l27c16,\n  RL_action_np_1, RL_action_l33c9, RL_action_l35c9] ) fired in the same clock\n  cycle.\n",
					 283u);
static std::string const __str_literal_6("Error: \"src_bsv/Testbench.bsv\", line 20, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l20c9] and\n  [RL_action_l21c12, RL_action_np, RL_action_l27c16, RL_action_np_1,\n  RL_action_l33c9, RL_action_l35c9] ) fired in the same clock cycle.\n",
					 264u);
static std::string const __str_literal_7("Error: \"src_bsv/Testbench.bsv\", line 21, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l21c12] and\n  [RL_action_np, RL_action_l27c16, RL_action_np_1, RL_action_l33c9,\n  RL_action_l35c9] ) fired in the same clock cycle.\n",
					 248u);
static std::string const __str_literal_9("Error: \"src_bsv/Testbench.bsv\", line 27, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l27c16] and\n  [RL_action_np_1, RL_action_l33c9, RL_action_l35c9] ) fired in the same clock\n  cycle.\n",
					 216u);
static std::string const __str_literal_11("Error: \"src_bsv/Testbench.bsv\", line 33, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l33c9] and\n  [RL_action_l35c9] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_4("Single-input test completed.", 28u);
static std::string const __str_literal_1("Starting single-input test...", 29u);


/* Constructor */
MOD_mkTestbench::MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_dut(simHdl, "dut", this),
    INST_result(simHdl, "result", this, 32u, 0u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 46u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[7u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[8u], "dut", SYM_MODULE, &INST_dut);
  init_symbol(&symbols[9u], "RL_action_l17c9", SYM_RULE);
  init_symbol(&symbols[10u], "RL_action_l20c9", SYM_RULE);
  init_symbol(&symbols[11u], "RL_action_l21c12", SYM_RULE);
  init_symbol(&symbols[12u], "RL_action_l27c16", SYM_RULE);
  init_symbol(&symbols[13u], "RL_action_l33c9", SYM_RULE);
  init_symbol(&symbols[14u], "RL_action_l35c9", SYM_RULE);
  init_symbol(&symbols[15u], "RL_action_np", SYM_RULE);
  init_symbol(&symbols[16u], "RL_action_np_1", SYM_RULE);
  init_symbol(&symbols[17u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[18u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[19u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[20u], "RL_idle_l16c21", SYM_RULE);
  init_symbol(&symbols[21u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[22u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[23u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[24u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[25u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[26u], "result", SYM_MODULE, &INST_result);
  init_symbol(&symbols[27u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[28u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[29u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[30u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[31u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[32u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[33u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[34u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[35u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[36u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[37u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_action_l17c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l17c9,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_action_l20c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l20c9,
	      1u);
  init_symbol(&symbols[40u],
	      "WILL_FIRE_RL_action_l21c12",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l21c12,
	      1u);
  init_symbol(&symbols[41u],
	      "WILL_FIRE_RL_action_l27c16",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l27c16,
	      1u);
  init_symbol(&symbols[42u],
	      "WILL_FIRE_RL_action_l33c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l33c9,
	      1u);
  init_symbol(&symbols[43u],
	      "WILL_FIRE_RL_action_l35c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l35c9,
	      1u);
  init_symbol(&symbols[44u], "WILL_FIRE_RL_action_np", SYM_DEF, &DEF_WILL_FIRE_RL_action_np, 1u);
  init_symbol(&symbols[45u], "WILL_FIRE_RL_action_np_1", SYM_DEF, &DEF_WILL_FIRE_RL_action_np_1, 1u);
}


/* Rule actions */

void MOD_mkTestbench::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas_AND_start_reg_2_wget___d3;
  DEF_start_reg_2_whas_AND_start_reg_2_wget___d3 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas_AND_start_reg_2_wget___d3);
}

void MOD_mkTestbench::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTestbench::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15;
  DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15);
}

void MOD_mkTestbench::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21;
  tUInt8 DEF_state_can_overlap__h2663;
  DEF_state_can_overlap__h2663 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h2663);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21);
}

void MOD_mkTestbench::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTestbench::RL_action_l17c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
}

void MOD_mkTestbench::RL_action_l20c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkTestbench::RL_action_l21c12()
{
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_dut.METH_the_assign(10u, 20u, 30u);
}

void MOD_mkTestbench::RL_action_np()
{
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTestbench::RL_action_l27c16()
{
  tUInt32 DEF_b__h14829;
  DEF_b__h14829 = INST_dut.METH_the_answer();
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_result.METH_write(DEF_b__h14829);
}

void MOD_mkTestbench::RL_action_np_1()
{
  INST_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTestbench::RL_action_l33c9()
{
  tUInt32 DEF_b__h15270;
  tUInt32 DEF_signed_result_0___d51;
  DEF_b__h15270 = INST_result.METH_read();
  DEF_signed_result_0___d51 = DEF_b__h15270;
  INST_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_3, DEF_signed_result_0___d51);
}

void MOD_mkTestbench::RL_action_l35c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)8u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkTestbench::RL_idle_l16c21()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTestbench::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTestbench::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTestbench::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTestbench::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l17c9 && ((((((DEF_WILL_FIRE_RL_action_l20c9 || DEF_WILL_FIRE_RL_action_l21c12) || DEF_WILL_FIRE_RL_action_np) || DEF_WILL_FIRE_RL_action_l27c16) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_l33c9) || DEF_WILL_FIRE_RL_action_l35c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkTestbench::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l20c9 && (((((DEF_WILL_FIRE_RL_action_l21c12 || DEF_WILL_FIRE_RL_action_np) || DEF_WILL_FIRE_RL_action_l27c16) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_l33c9) || DEF_WILL_FIRE_RL_action_l35c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}

void MOD_mkTestbench::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l21c12 && ((((DEF_WILL_FIRE_RL_action_np || DEF_WILL_FIRE_RL_action_l27c16) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_l33c9) || DEF_WILL_FIRE_RL_action_l35c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkTestbench::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_np && (((DEF_WILL_FIRE_RL_action_l27c16 || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_l33c9) || DEF_WILL_FIRE_RL_action_l35c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkTestbench::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l27c16 && ((DEF_WILL_FIRE_RL_action_np_1 || DEF_WILL_FIRE_RL_action_l33c9) || DEF_WILL_FIRE_RL_action_l35c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkTestbench::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_np_1 && (DEF_WILL_FIRE_RL_action_l33c9 || DEF_WILL_FIRE_RL_action_l35c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkTestbench::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l33c9 && DEF_WILL_FIRE_RL_action_l35c9)
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}


/* Methods */


/* Reset routines */

void MOD_mkTestbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_result.reset_RST(ARG_rst_in);
  INST_dut.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_dut.dump_state(indent + 2u);
  INST_result.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 22u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l17c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l20c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l21c12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l27c16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l33c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l35c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_np", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_np_1", 1u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_result.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dut.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestbench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTestbench::vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l17c9) != DEF_WILL_FIRE_RL_action_l17c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l17c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l17c9 = DEF_WILL_FIRE_RL_action_l17c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l20c9) != DEF_WILL_FIRE_RL_action_l20c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l20c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l20c9 = DEF_WILL_FIRE_RL_action_l20c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l21c12) != DEF_WILL_FIRE_RL_action_l21c12)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l21c12, 1u);
	backing.DEF_WILL_FIRE_RL_action_l21c12 = DEF_WILL_FIRE_RL_action_l21c12;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l27c16) != DEF_WILL_FIRE_RL_action_l27c16)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l27c16, 1u);
	backing.DEF_WILL_FIRE_RL_action_l27c16 = DEF_WILL_FIRE_RL_action_l27c16;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l33c9) != DEF_WILL_FIRE_RL_action_l33c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l33c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l33c9 = DEF_WILL_FIRE_RL_action_l33c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l35c9) != DEF_WILL_FIRE_RL_action_l35c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l35c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l35c9 = DEF_WILL_FIRE_RL_action_l35c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_np) != DEF_WILL_FIRE_RL_action_np)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_np, 1u);
	backing.DEF_WILL_FIRE_RL_action_np = DEF_WILL_FIRE_RL_action_np;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_np_1) != DEF_WILL_FIRE_RL_action_np_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_np_1, 1u);
	backing.DEF_WILL_FIRE_RL_action_np_1 = DEF_WILL_FIRE_RL_action_np_1;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l17c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l17c9 = DEF_WILL_FIRE_RL_action_l17c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l20c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l20c9 = DEF_WILL_FIRE_RL_action_l20c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l21c12, 1u);
      backing.DEF_WILL_FIRE_RL_action_l21c12 = DEF_WILL_FIRE_RL_action_l21c12;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l27c16, 1u);
      backing.DEF_WILL_FIRE_RL_action_l27c16 = DEF_WILL_FIRE_RL_action_l27c16;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l33c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l33c9 = DEF_WILL_FIRE_RL_action_l33c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l35c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l35c9 = DEF_WILL_FIRE_RL_action_l35c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_np, 1u);
      backing.DEF_WILL_FIRE_RL_action_np = DEF_WILL_FIRE_RL_action_np;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_np_1, 1u);
      backing.DEF_WILL_FIRE_RL_action_np_1 = DEF_WILL_FIRE_RL_action_np_1;
    }
}

void MOD_mkTestbench::vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_result.dump_VCD(dt, backing.INST_result);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}

void MOD_mkTestbench::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  INST_dut.dump_VCD(dt, levels, backing.INST_dut);
}
