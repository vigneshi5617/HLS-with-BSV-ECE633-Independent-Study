/*
 * Generated by Bluespec Compiler, version 2024.07-22-g934465e3 (build 934465e3)
 * 
 * On Wed Feb  5 20:12:58 EST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mkModuleDeepThought.h"


/* String declarations */
static std::string const __str_literal_2("After firing the values are  a=%d, b= %d, c= %d", 47u);
static std::string const __str_literal_1("Firing with a=%d, b= %d, c= %d", 30u);


/* Constructor */
MOD_mkModuleDeepThought::MOD_mkModuleDeepThought(tSimStateHdl simHdl,
						 char const *name,
						 Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_a(simHdl, "a", this, 32u, 0u, (tUInt8)0u),
    INST_b(simHdl, "b", this, 32u, 0u, (tUInt8)0u),
    INST_c(simHdl, "c", this, 32u, 0u, (tUInt8)0u),
    INST_d(simHdl, "d", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 5u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkModuleDeepThought::init_symbols_0()
{
  init_symbol(&symbols[0u], "a", SYM_MODULE, &INST_a);
  init_symbol(&symbols[1u], "b", SYM_MODULE, &INST_b);
  init_symbol(&symbols[2u], "c", SYM_MODULE, &INST_c);
  init_symbol(&symbols[3u], "d", SYM_MODULE, &INST_d);
  init_symbol(&symbols[4u], "RL_compute_answer", SYM_RULE);
}


/* Rule actions */

void MOD_mkModuleDeepThought::RL_compute_answer()
{
  tUInt32 DEF_a_PLUS_b_PLUS_c___d8;
  DEF_b__h202 = INST_c.METH_read();
  DEF_signed_c___d6 = DEF_b__h202;
  DEF_b__h196 = INST_a.METH_read();
  DEF_signed_a___d2 = DEF_b__h196;
  DEF_b__h199 = INST_b.METH_read();
  DEF_signed_b___d4 = DEF_b__h199;
  DEF_a_PLUS_b_PLUS_c___d8 = (DEF_b__h196 + DEF_b__h199) + DEF_b__h202;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,-32",
		   &__str_literal_1,
		   DEF_signed_a___d2,
		   DEF_signed_b___d4,
		   DEF_signed_c___d6);
  INST_d.METH_write(DEF_a_PLUS_b_PLUS_c___d8);
}


/* Methods */

void MOD_mkModuleDeepThought::METH_the_assign(tUInt32 ARG_the_assign_x,
					      tUInt32 ARG_the_assign_y,
					      tUInt32 ARG_the_assign_z)
{
  DEF_b__h202 = INST_c.METH_read();
  DEF_signed_c___d6 = DEF_b__h202;
  DEF_b__h196 = INST_a.METH_read();
  DEF_signed_a___d2 = DEF_b__h196;
  DEF_b__h199 = INST_b.METH_read();
  DEF_signed_b___d4 = DEF_b__h199;
  INST_a.METH_write(ARG_the_assign_x);
  INST_b.METH_write(ARG_the_assign_y);
  INST_c.METH_write(ARG_the_assign_z);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,-32",
		   &__str_literal_2,
		   DEF_signed_a___d2,
		   DEF_signed_b___d4,
		   DEF_signed_c___d6);
}

tUInt8 MOD_mkModuleDeepThought::METH_RDY_the_assign()
{
  tUInt8 DEF_CAN_FIRE_the_assign;
  tUInt8 PORT_RDY_the_assign;
  DEF_CAN_FIRE_the_assign = (tUInt8)1u;
  PORT_RDY_the_assign = DEF_CAN_FIRE_the_assign;
  return PORT_RDY_the_assign;
}

tUInt32 MOD_mkModuleDeepThought::METH_the_answer()
{
  tUInt32 PORT_the_answer;
  PORT_the_answer = INST_d.METH_read();
  return PORT_the_answer;
}

tUInt8 MOD_mkModuleDeepThought::METH_RDY_the_answer()
{
  tUInt8 DEF_CAN_FIRE_the_answer;
  tUInt8 PORT_RDY_the_answer;
  DEF_CAN_FIRE_the_answer = (tUInt8)1u;
  PORT_RDY_the_answer = DEF_CAN_FIRE_the_answer;
  return PORT_RDY_the_answer;
}


/* Reset routines */

void MOD_mkModuleDeepThought::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_d.reset_RST(ARG_rst_in);
  INST_c.reset_RST(ARG_rst_in);
  INST_b.reset_RST(ARG_rst_in);
  INST_a.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkModuleDeepThought::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkModuleDeepThought::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_a.dump_state(indent + 2u);
  INST_b.dump_state(indent + 2u);
  INST_c.dump_state(indent + 2u);
  INST_d.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkModuleDeepThought::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 11u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h196", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h199", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h202", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_a___d2", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_b___d4", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_c___d6", 32u);
  num = INST_a.dump_VCD_defs(num);
  num = INST_b.dump_VCD_defs(num);
  num = INST_c.dump_VCD_defs(num);
  num = INST_d.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkModuleDeepThought::dump_VCD(tVCDDumpType dt,
				       unsigned int levels,
				       MOD_mkModuleDeepThought &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkModuleDeepThought::vcd_defs(tVCDDumpType dt, MOD_mkModuleDeepThought &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h196) != DEF_b__h196)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h196, 32u);
	backing.DEF_b__h196 = DEF_b__h196;
      }
      ++num;
      if ((backing.DEF_b__h199) != DEF_b__h199)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h199, 32u);
	backing.DEF_b__h199 = DEF_b__h199;
      }
      ++num;
      if ((backing.DEF_b__h202) != DEF_b__h202)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h202, 32u);
	backing.DEF_b__h202 = DEF_b__h202;
      }
      ++num;
      if ((backing.DEF_signed_a___d2) != DEF_signed_a___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_a___d2, 32u);
	backing.DEF_signed_a___d2 = DEF_signed_a___d2;
      }
      ++num;
      if ((backing.DEF_signed_b___d4) != DEF_signed_b___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_b___d4, 32u);
	backing.DEF_signed_b___d4 = DEF_signed_b___d4;
      }
      ++num;
      if ((backing.DEF_signed_c___d6) != DEF_signed_c___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_c___d6, 32u);
	backing.DEF_signed_c___d6 = DEF_signed_c___d6;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h196, 32u);
      backing.DEF_b__h196 = DEF_b__h196;
      vcd_write_val(sim_hdl, num++, DEF_b__h199, 32u);
      backing.DEF_b__h199 = DEF_b__h199;
      vcd_write_val(sim_hdl, num++, DEF_b__h202, 32u);
      backing.DEF_b__h202 = DEF_b__h202;
      vcd_write_val(sim_hdl, num++, DEF_signed_a___d2, 32u);
      backing.DEF_signed_a___d2 = DEF_signed_a___d2;
      vcd_write_val(sim_hdl, num++, DEF_signed_b___d4, 32u);
      backing.DEF_signed_b___d4 = DEF_signed_b___d4;
      vcd_write_val(sim_hdl, num++, DEF_signed_c___d6, 32u);
      backing.DEF_signed_c___d6 = DEF_signed_c___d6;
    }
}

void MOD_mkModuleDeepThought::vcd_prims(tVCDDumpType dt, MOD_mkModuleDeepThought &backing)
{
  INST_a.dump_VCD(dt, backing.INST_a);
  INST_b.dump_VCD(dt, backing.INST_b);
  INST_c.dump_VCD(dt, backing.INST_c);
  INST_d.dump_VCD(dt, backing.INST_d);
}
