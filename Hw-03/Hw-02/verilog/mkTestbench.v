//
// Generated by Bluespec Compiler, version 2024.07-22-g934465e3 (build 934465e3)
//
// On Wed Feb  5 20:13:16 EST 2025
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTestbench(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire start_wire$whas, state_set_pw$whas;

  // register result
  reg [31 : 0] result;
  wire [31 : 0] result$D_IN;
  wire result$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [3 : 0] state_mkFSMstate;
  reg [3 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule dut
  wire [31 : 0] dut$the_answer,
		dut$the_assign_x,
		dut$the_assign_y,
		dut$the_assign_z;
  wire dut$EN_the_assign;

  // rule scheduling signals
  wire CAN_FIRE_RL_action_l17c9,
       CAN_FIRE_RL_action_l20c9,
       CAN_FIRE_RL_action_l21c12,
       CAN_FIRE_RL_action_l27c16,
       CAN_FIRE_RL_action_l33c9,
       CAN_FIRE_RL_action_l35c9,
       CAN_FIRE_RL_action_np,
       CAN_FIRE_RL_action_np_1,
       CAN_FIRE_RL_auto_finish,
       CAN_FIRE_RL_auto_start,
       CAN_FIRE_RL_fsm_start,
       CAN_FIRE_RL_idle_l16c21,
       CAN_FIRE_RL_restart,
       CAN_FIRE_RL_start_reg__dreg_update,
       CAN_FIRE_RL_state_every,
       CAN_FIRE_RL_state_fired__dreg_update,
       CAN_FIRE_RL_state_handle_abort,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_5,
       CAN_FIRE___me_check_6,
       CAN_FIRE___me_check_7,
       CAN_FIRE___me_check_8,
       CAN_FIRE___me_check_9,
       WILL_FIRE_RL_action_l17c9,
       WILL_FIRE_RL_action_l20c9,
       WILL_FIRE_RL_action_l21c12,
       WILL_FIRE_RL_action_l27c16,
       WILL_FIRE_RL_action_l33c9,
       WILL_FIRE_RL_action_l35c9,
       WILL_FIRE_RL_action_np,
       WILL_FIRE_RL_action_np_1,
       WILL_FIRE_RL_auto_finish,
       WILL_FIRE_RL_auto_start,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l16c21,
       WILL_FIRE_RL_restart,
       WILL_FIRE_RL_start_reg__dreg_update,
       WILL_FIRE_RL_state_every,
       WILL_FIRE_RL_state_fired__dreg_update,
       WILL_FIRE_RL_state_handle_abort,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_5,
       WILL_FIRE___me_check_6,
       WILL_FIRE___me_check_7,
       WILL_FIRE___me_check_8,
       WILL_FIRE___me_check_9;

  // remaining internal signals
  wire abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d58;

  // submodule dut
  mkModuleDeepThought dut(.CLK(CLK),
			  .RST_N(RST_N),
			  .the_assign_x(dut$the_assign_x),
			  .the_assign_y(dut$the_assign_y),
			  .the_assign_z(dut$the_assign_z),
			  .EN_the_assign(dut$EN_the_assign),
			  .RDY_the_assign(),
			  .the_answer(dut$the_answer),
			  .RDY_the_answer());

  // rule RL_restart
  assign CAN_FIRE_RL_restart = start_reg_1 && !state_fired ;
  assign WILL_FIRE_RL_restart = CAN_FIRE_RL_restart ;

  // rule RL_action_l20c9
  assign CAN_FIRE_RL_action_l20c9 = state_mkFSMstate == 4'd1 ;
  assign WILL_FIRE_RL_action_l20c9 = CAN_FIRE_RL_action_l20c9 ;

  // rule RL_action_np
  assign CAN_FIRE_RL_action_np = state_mkFSMstate == 4'd3 ;
  assign WILL_FIRE_RL_action_np = CAN_FIRE_RL_action_np ;

  // rule RL_action_l27c16
  assign CAN_FIRE_RL_action_l27c16 = state_mkFSMstate == 4'd4 ;
  assign WILL_FIRE_RL_action_l27c16 = CAN_FIRE_RL_action_l27c16 ;

  // rule RL_action_l21c12
  assign CAN_FIRE_RL_action_l21c12 = state_mkFSMstate == 4'd2 ;
  assign WILL_FIRE_RL_action_l21c12 = CAN_FIRE_RL_action_l21c12 ;

  // rule RL_action_np_1
  assign CAN_FIRE_RL_action_np_1 = state_mkFSMstate == 4'd5 ;
  assign WILL_FIRE_RL_action_np_1 = CAN_FIRE_RL_action_np_1 ;

  // rule RL_action_l33c9
  assign CAN_FIRE_RL_action_l33c9 = state_mkFSMstate == 4'd6 ;
  assign WILL_FIRE_RL_action_l33c9 = CAN_FIRE_RL_action_l33c9 ;

  // rule RL_action_l35c9
  assign CAN_FIRE_RL_action_l35c9 = state_mkFSMstate == 4'd7 ;
  assign WILL_FIRE_RL_action_l35c9 = CAN_FIRE_RL_action_l35c9 ;

  // rule __me_check_6
  assign CAN_FIRE___me_check_6 = 1'b1 ;
  assign WILL_FIRE___me_check_6 = 1'b1 ;

  // rule __me_check_7
  assign CAN_FIRE___me_check_7 = 1'b1 ;
  assign WILL_FIRE___me_check_7 = 1'b1 ;

  // rule __me_check_8
  assign CAN_FIRE___me_check_8 = 1'b1 ;
  assign WILL_FIRE___me_check_8 = 1'b1 ;

  // rule __me_check_9
  assign CAN_FIRE___me_check_9 = 1'b1 ;
  assign WILL_FIRE___me_check_9 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule RL_fsm_start
  assign CAN_FIRE_RL_fsm_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d58 &&
	     start_reg ;
  assign WILL_FIRE_RL_fsm_start = CAN_FIRE_RL_fsm_start ;

  // rule RL_action_l17c9
  assign CAN_FIRE_RL_action_l17c9 =
	     start_wire$whas &&
	     (state_mkFSMstate == 4'd0 || state_mkFSMstate == 4'd8) ;
  assign WILL_FIRE_RL_action_l17c9 = CAN_FIRE_RL_action_l17c9 ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule RL_idle_l16c21
  assign CAN_FIRE_RL_idle_l16c21 =
	     !start_wire$whas && state_mkFSMstate == 4'd8 ;
  assign WILL_FIRE_RL_idle_l16c21 = CAN_FIRE_RL_idle_l16c21 ;

  // rule RL_auto_start
  assign CAN_FIRE_RL_auto_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d58 &&
	     !start_reg &&
	     !running ;
  assign WILL_FIRE_RL_auto_start = CAN_FIRE_RL_auto_start ;

  // rule RL_auto_finish
  assign CAN_FIRE_RL_auto_finish =
	     running &&
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d58 &&
	     !start_reg ;
  assign WILL_FIRE_RL_auto_finish = CAN_FIRE_RL_auto_finish ;

  // rule RL_start_reg__dreg_update
  assign CAN_FIRE_RL_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_start_reg__dreg_update = 1'd1 ;

  // rule RL_state_handle_abort
  assign CAN_FIRE_RL_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_state_handle_abort = 1'b0 ;

  // rule RL_state_every
  assign CAN_FIRE_RL_state_every = 1'd1 ;
  assign WILL_FIRE_RL_state_every = 1'd1 ;

  // rule RL_state_fired__dreg_update
  assign CAN_FIRE_RL_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_state_fired__dreg_update = 1'd1 ;

  // inlined wires
  assign start_wire$whas = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_restart ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l16c21 || WILL_FIRE_RL_action_l35c9 ||
	     WILL_FIRE_RL_action_l33c9 ||
	     WILL_FIRE_RL_action_np_1 ||
	     WILL_FIRE_RL_action_l27c16 ||
	     WILL_FIRE_RL_action_np ||
	     WILL_FIRE_RL_action_l21c12 ||
	     WILL_FIRE_RL_action_l20c9 ||
	     WILL_FIRE_RL_action_l17c9 ;

  // register result
  assign result$D_IN = dut$the_answer ;
  assign result$EN = CAN_FIRE_RL_action_l27c16 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = CAN_FIRE_RL_auto_start ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_auto_start ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(WILL_FIRE_RL_idle_l16c21 or
	  WILL_FIRE_RL_action_l17c9 or
	  WILL_FIRE_RL_action_l20c9 or
	  WILL_FIRE_RL_action_l21c12 or
	  WILL_FIRE_RL_action_np or
	  WILL_FIRE_RL_action_l27c16 or
	  WILL_FIRE_RL_action_np_1 or
	  WILL_FIRE_RL_action_l33c9 or WILL_FIRE_RL_action_l35c9)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_idle_l16c21: state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_action_l17c9: state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_action_l20c9: state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_action_l21c12: state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_action_np: state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_action_l27c16: state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_action_np_1: state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_action_l33c9: state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_action_l35c9: state_mkFSMstate$D_IN = 4'd8;
      default: state_mkFSMstate$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l16c21 || WILL_FIRE_RL_action_l17c9 ||
	     WILL_FIRE_RL_action_l20c9 ||
	     WILL_FIRE_RL_action_l21c12 ||
	     WILL_FIRE_RL_action_np ||
	     WILL_FIRE_RL_action_l27c16 ||
	     WILL_FIRE_RL_action_np_1 ||
	     WILL_FIRE_RL_action_l33c9 ||
	     WILL_FIRE_RL_action_l35c9 ;

  // submodule dut
  assign dut$the_assign_x = 32'd10 ;
  assign dut$the_assign_y = 32'd20 ;
  assign dut$the_assign_z = 32'd30 ;
  assign dut$EN_the_assign = CAN_FIRE_RL_action_l21c12 ;

  // remaining internal signals
  assign abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d58 =
	     (state_mkFSMstate == 4'd0 || state_mkFSMstate == 4'd8) &&
	     (!start_reg_1 || state_fired) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        result <= `BSV_ASSIGNMENT_DELAY 32'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (result$EN) result <= `BSV_ASSIGNMENT_DELAY result$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    result = 32'hAAAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l20c9)
	$display("Assigning values: (10, 20, 30)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l33c9)
	$display("Computed Answer: %d (Expected: 60)", $signed(result));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l35c9) $display("Single-input test completed.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l20c9 &&
	  (WILL_FIRE_RL_action_l21c12 || WILL_FIRE_RL_action_np ||
	   WILL_FIRE_RL_action_l27c16 ||
	   WILL_FIRE_RL_action_np_1 ||
	   WILL_FIRE_RL_action_l33c9 ||
	   WILL_FIRE_RL_action_l35c9))
	$display("Error: \"src_bsv/Testbench.bsv\", line 20, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l20c9] and\n  [RL_action_l21c12, RL_action_np, RL_action_l27c16, RL_action_np_1,\n  RL_action_l33c9, RL_action_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l21c12 &&
	  (WILL_FIRE_RL_action_np || WILL_FIRE_RL_action_l27c16 ||
	   WILL_FIRE_RL_action_np_1 ||
	   WILL_FIRE_RL_action_l33c9 ||
	   WILL_FIRE_RL_action_l35c9))
	$display("Error: \"src_bsv/Testbench.bsv\", line 21, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l21c12] and\n  [RL_action_np, RL_action_l27c16, RL_action_np_1, RL_action_l33c9,\n  RL_action_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_np &&
	  (WILL_FIRE_RL_action_l27c16 || WILL_FIRE_RL_action_np_1 ||
	   WILL_FIRE_RL_action_l33c9 ||
	   WILL_FIRE_RL_action_l35c9))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_np] and\n  [RL_action_l27c16, RL_action_np_1, RL_action_l33c9, RL_action_l35c9] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l27c16 &&
	  (WILL_FIRE_RL_action_np_1 || WILL_FIRE_RL_action_l33c9 ||
	   WILL_FIRE_RL_action_l35c9))
	$display("Error: \"src_bsv/Testbench.bsv\", line 27, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l27c16] and\n  [RL_action_np_1, RL_action_l33c9, RL_action_l35c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l33c9 && WILL_FIRE_RL_action_l35c9)
	$display("Error: \"src_bsv/Testbench.bsv\", line 33, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l33c9] and\n  [RL_action_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_np_1 &&
	  (WILL_FIRE_RL_action_l33c9 || WILL_FIRE_RL_action_l35c9))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_np_1] and\n  [RL_action_l33c9, RL_action_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l17c9)
	$display("Starting single-input test...");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l17c9 &&
	  (WILL_FIRE_RL_action_l20c9 || WILL_FIRE_RL_action_l21c12 ||
	   WILL_FIRE_RL_action_np ||
	   WILL_FIRE_RL_action_l27c16 ||
	   WILL_FIRE_RL_action_np_1 ||
	   WILL_FIRE_RL_action_l33c9 ||
	   WILL_FIRE_RL_action_l35c9))
	$display("Error: \"src_bsv/Testbench.bsv\", line 17, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l17c9] and\n  [RL_action_l20c9, RL_action_l21c12, RL_action_np, RL_action_l27c16,\n  RL_action_np_1, RL_action_l33c9, RL_action_l35c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_auto_finish) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTestbench

