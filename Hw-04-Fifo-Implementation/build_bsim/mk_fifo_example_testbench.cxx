/*
 * Generated by Bluespec Compiler, version 2024.07-22-g934465e3 (build 934465e3)
 * 
 * On Tue Feb 25 14:42:46 EST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mk_fifo_example_testbench.h"


/* String declarations */
static std::string const __str_literal_3("counter has reacehd 20", 22u);
static std::string const __str_literal_2("lv_data = %d ", 13u);
static std::string const __str_literal_1("reg_input_1 = %d , reg_input_2 = %d", 35u);


/* Constructor */
MOD_mk_fifo_example_testbench::MOD_mk_fifo_example_testbench(tSimStateHdl simHdl,
							     char const *name,
							     Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_fifo_inst(simHdl, "fifo_inst", this),
    INST_reg_input_1(simHdl, "reg_input_1", this, 32u, 2u, (tUInt8)0u),
    INST_reg_input_2(simHdl, "reg_input_2", this, 32u, 3u, (tUInt8)0u),
    INST_rg_counter(simHdl, "rg_counter", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 7u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mk_fifo_example_testbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h178", SYM_DEF, &DEF_b__h178, 32u);
  init_symbol(&symbols[1u], "fifo_inst", SYM_MODULE, &INST_fifo_inst);
  init_symbol(&symbols[2u], "RL_rl1", SYM_RULE);
  init_symbol(&symbols[3u], "RL_rl_2", SYM_RULE);
  init_symbol(&symbols[4u], "reg_input_1", SYM_MODULE, &INST_reg_input_1);
  init_symbol(&symbols[5u], "reg_input_2", SYM_MODULE, &INST_reg_input_2);
  init_symbol(&symbols[6u], "rg_counter", SYM_MODULE, &INST_rg_counter);
}


/* Rule actions */

void MOD_mk_fifo_example_testbench::RL_rl1()
{
  tUInt32 DEF_signed_reg_input_2___d8;
  tUInt32 DEF_signed_reg_input_1___d6;
  DEF_b__h213 = INST_reg_input_1.METH_read();
  DEF_signed_reg_input_1___d6 = DEF_b__h213;
  DEF_b__h216 = INST_reg_input_2.METH_read();
  DEF_signed_reg_input_2___d8 = DEF_b__h216;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_1,
		   DEF_signed_reg_input_1___d6,
		   DEF_signed_reg_input_2___d8);
    dollar_dumpvars(sim_hdl);
  }
  INST_fifo_inst.METH_put_data(DEF_b__h213, DEF_b__h216);
}

void MOD_mk_fifo_example_testbench::RL_rl_2()
{
  tUInt32 DEF_rg_counter_PLUS_1___d10;
  tUInt32 DEF_reg_input_2_BITS_30_TO_0_3_CONCAT_0___d14;
  tUInt32 DEF_reg_input_1_BITS_30_TO_0_1_CONCAT_0___d12;
  tUInt8 DEF_rg_counter_EQ_20___d20;
  tUInt32 DEF_reg_input_2_BITS_30_TO_0___h391;
  tUInt32 DEF_reg_input_1_BITS_30_TO_0___h354;
  tUInt64 DEF_fifo_inst_get_data___d15;
  tUInt32 DEF_signed_fifo_inst_get_data_5_BITS_63_TO_32_6___d17;
  tUInt32 DEF_signed_fifo_inst_get_data_5_BITS_31_TO_0_8___d19;
  tUInt64 DEF_AVMeth_fifo_inst_get_data;
  DEF_b__h213 = INST_reg_input_1.METH_read();
  DEF_b__h216 = INST_reg_input_2.METH_read();
  DEF_b__h178 = INST_rg_counter.METH_read();
  DEF_reg_input_1_BITS_30_TO_0___h354 = (tUInt32)(2147483647u & DEF_b__h213);
  DEF_reg_input_2_BITS_30_TO_0___h391 = (tUInt32)(2147483647u & DEF_b__h216);
  DEF_rg_counter_EQ_20___d20 = DEF_b__h178 == 20u;
  DEF_reg_input_1_BITS_30_TO_0_1_CONCAT_0___d12 = (DEF_reg_input_1_BITS_30_TO_0___h354 << 1u) | (tUInt32)((tUInt8)0u);
  DEF_reg_input_2_BITS_30_TO_0_3_CONCAT_0___d14 = (DEF_reg_input_2_BITS_30_TO_0___h391 << 1u) | (tUInt32)((tUInt8)0u);
  DEF_rg_counter_PLUS_1___d10 = DEF_b__h178 + 1u;
  INST_rg_counter.METH_write(DEF_rg_counter_PLUS_1___d10);
  INST_reg_input_1.METH_write(DEF_reg_input_1_BITS_30_TO_0_1_CONCAT_0___d12);
  INST_reg_input_2.METH_write(DEF_reg_input_2_BITS_30_TO_0_3_CONCAT_0___d14);
  DEF_AVMeth_fifo_inst_get_data = INST_fifo_inst.METH_get_data();
  DEF_fifo_inst_get_data___d15 = DEF_AVMeth_fifo_inst_get_data;
  DEF_signed_fifo_inst_get_data_5_BITS_31_TO_0_8___d19 = (tUInt32)(DEF_fifo_inst_get_data___d15);
  DEF_signed_fifo_inst_get_data_5_BITS_63_TO_32_6___d17 = (tUInt32)(DEF_fifo_inst_get_data___d15 >> 32u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_2,
		   DEF_signed_fifo_inst_get_data_5_BITS_63_TO_32_6___d17,
		   DEF_signed_fifo_inst_get_data_5_BITS_31_TO_0_8___d19);
    if (DEF_rg_counter_EQ_20___d20)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
    if (DEF_rg_counter_EQ_20___d20)
      dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mk_fifo_example_testbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rg_counter.reset_RST(ARG_rst_in);
  INST_reg_input_2.reset_RST(ARG_rst_in);
  INST_reg_input_1.reset_RST(ARG_rst_in);
  INST_fifo_inst.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mk_fifo_example_testbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mk_fifo_example_testbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_fifo_inst.dump_state(indent + 2u);
  INST_reg_input_1.dump_state(indent + 2u);
  INST_reg_input_2.dump_state(indent + 2u);
  INST_rg_counter.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mk_fifo_example_testbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 7u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h178", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h213", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h216", 32u);
  num = INST_reg_input_1.dump_VCD_defs(num);
  num = INST_reg_input_2.dump_VCD_defs(num);
  num = INST_rg_counter.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_fifo_inst.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mk_fifo_example_testbench::dump_VCD(tVCDDumpType dt,
					     unsigned int levels,
					     MOD_mk_fifo_example_testbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mk_fifo_example_testbench::vcd_defs(tVCDDumpType dt,
					     MOD_mk_fifo_example_testbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h178) != DEF_b__h178)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h178, 32u);
	backing.DEF_b__h178 = DEF_b__h178;
      }
      ++num;
      if ((backing.DEF_b__h213) != DEF_b__h213)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h213, 32u);
	backing.DEF_b__h213 = DEF_b__h213;
      }
      ++num;
      if ((backing.DEF_b__h216) != DEF_b__h216)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h216, 32u);
	backing.DEF_b__h216 = DEF_b__h216;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h178, 32u);
      backing.DEF_b__h178 = DEF_b__h178;
      vcd_write_val(sim_hdl, num++, DEF_b__h213, 32u);
      backing.DEF_b__h213 = DEF_b__h213;
      vcd_write_val(sim_hdl, num++, DEF_b__h216, 32u);
      backing.DEF_b__h216 = DEF_b__h216;
    }
}

void MOD_mk_fifo_example_testbench::vcd_prims(tVCDDumpType dt,
					      MOD_mk_fifo_example_testbench &backing)
{
  INST_reg_input_1.dump_VCD(dt, backing.INST_reg_input_1);
  INST_reg_input_2.dump_VCD(dt, backing.INST_reg_input_2);
  INST_rg_counter.dump_VCD(dt, backing.INST_rg_counter);
}

void MOD_mk_fifo_example_testbench::vcd_submodules(tVCDDumpType dt,
						   unsigned int levels,
						   MOD_mk_fifo_example_testbench &backing)
{
  INST_fifo_inst.dump_VCD(dt, levels, backing.INST_fifo_inst);
}
