//
// Generated by Bluespec Compiler, version 2024.07-22-g934465e3 (build 934465e3)
//
// On Tue Feb 25 14:39:00 EST 2025
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_fifo_example_testbench(CLK,
				 RST_N);
  input  CLK;
  input  RST_N;

  // register reg_input_1
  reg [31 : 0] reg_input_1;
  wire [31 : 0] reg_input_1$D_IN;
  wire reg_input_1$EN;

  // register reg_input_2
  reg [31 : 0] reg_input_2;
  wire [31 : 0] reg_input_2$D_IN;
  wire reg_input_2$EN;

  // register rg_counter
  reg [31 : 0] rg_counter;
  wire [31 : 0] rg_counter$D_IN;
  wire rg_counter$EN;

  // ports of submodule fifo_inst
  wire [63 : 0] fifo_inst$get_data;
  wire [31 : 0] fifo_inst$put_data_a, fifo_inst$put_data_b;
  wire fifo_inst$EN_get_data,
       fifo_inst$EN_put_data,
       fifo_inst$RDY_get_data,
       fifo_inst$RDY_put_data;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl1, CAN_FIRE_RL_rl_2, WILL_FIRE_RL_rl1, WILL_FIRE_RL_rl_2;

  // submodule fifo_inst
  mk_fifo_example fifo_inst(.CLK(CLK),
			    .RST_N(RST_N),
			    .put_data_a(fifo_inst$put_data_a),
			    .put_data_b(fifo_inst$put_data_b),
			    .EN_put_data(fifo_inst$EN_put_data),
			    .EN_get_data(fifo_inst$EN_get_data),
			    .RDY_put_data(fifo_inst$RDY_put_data),
			    .get_data(fifo_inst$get_data),
			    .RDY_get_data(fifo_inst$RDY_get_data));

  // rule RL_rl1
  assign CAN_FIRE_RL_rl1 =
	     fifo_inst$RDY_put_data &&
	     (rg_counter ^ 32'h80000000) < 32'h80000014 ;
  assign WILL_FIRE_RL_rl1 = CAN_FIRE_RL_rl1 ;

  // rule RL_rl_2
  assign CAN_FIRE_RL_rl_2 = fifo_inst$RDY_get_data ;
  assign WILL_FIRE_RL_rl_2 = fifo_inst$RDY_get_data ;

  // register reg_input_1
  assign reg_input_1$D_IN = { reg_input_1[30:0], 1'd0 } ;
  assign reg_input_1$EN = fifo_inst$RDY_get_data ;

  // register reg_input_2
  assign reg_input_2$D_IN = { reg_input_2[30:0], 1'd0 } ;
  assign reg_input_2$EN = fifo_inst$RDY_get_data ;

  // register rg_counter
  assign rg_counter$D_IN = rg_counter + 32'd1 ;
  assign rg_counter$EN = fifo_inst$RDY_get_data ;

  // submodule fifo_inst
  assign fifo_inst$put_data_a = reg_input_1 ;
  assign fifo_inst$put_data_b = reg_input_2 ;
  assign fifo_inst$EN_put_data = CAN_FIRE_RL_rl1 ;
  assign fifo_inst$EN_get_data = fifo_inst$RDY_get_data ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        reg_input_1 <= `BSV_ASSIGNMENT_DELAY 32'd2;
	reg_input_2 <= `BSV_ASSIGNMENT_DELAY 32'd3;
	rg_counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (reg_input_1$EN)
	  reg_input_1 <= `BSV_ASSIGNMENT_DELAY reg_input_1$D_IN;
	if (reg_input_2$EN)
	  reg_input_2 <= `BSV_ASSIGNMENT_DELAY reg_input_2$D_IN;
	if (rg_counter$EN)
	  rg_counter <= `BSV_ASSIGNMENT_DELAY rg_counter$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    reg_input_1 = 32'hAAAAAAAA;
    reg_input_2 = 32'hAAAAAAAA;
    rg_counter = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl1)
	$display("reg_input_1 = %d , reg_input_2 = %d",
		 $signed(reg_input_1),
		 $signed(reg_input_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (fifo_inst$RDY_get_data)
	$display("lv_data = %d ",
		 $signed(fifo_inst$get_data[63:32]),
		 $signed(fifo_inst$get_data[31:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (fifo_inst$RDY_get_data && rg_counter == 32'd20)
	$display("counter has reacehd 20");
    if (RST_N != `BSV_RESET_VALUE)
      if (fifo_inst$RDY_get_data && rg_counter == 32'd20) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mk_fifo_example_testbench

