//
// Generated by Bluespec Compiler, version 2024.07-22-g934465e3 (build 934465e3)
//
// On Tue Feb 25 14:38:59 EST 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_data                   O     1
// get_data                       O    64 reg
// RDY_get_data                   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_data_a                     I    32 reg
// put_data_b                     I    32 reg
// EN_put_data                    I     1
// EN_get_data                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_fifo_example(CLK,
		       RST_N,

		       put_data_a,
		       put_data_b,
		       EN_put_data,
		       RDY_put_data,

		       EN_get_data,
		       get_data,
		       RDY_get_data);
  input  CLK;
  input  RST_N;

  // action method put_data
  input  [31 : 0] put_data_a;
  input  [31 : 0] put_data_b;
  input  EN_put_data;
  output RDY_put_data;

  // actionvalue method get_data
  input  EN_get_data;
  output [63 : 0] get_data;
  output RDY_get_data;

  // signals for module outputs
  wire [63 : 0] get_data;
  wire RDY_get_data, RDY_put_data;

  // ports of submodule fifo_1
  wire [31 : 0] fifo_1$D_IN, fifo_1$D_OUT;
  wire fifo_1$CLR, fifo_1$DEQ, fifo_1$EMPTY_N, fifo_1$ENQ, fifo_1$FULL_N;

  // ports of submodule fifo_2
  wire [31 : 0] fifo_2$D_IN, fifo_2$D_OUT;
  wire fifo_2$CLR, fifo_2$DEQ, fifo_2$EMPTY_N, fifo_2$ENQ, fifo_2$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_get_data,
       CAN_FIRE_put_data,
       WILL_FIRE_get_data,
       WILL_FIRE_put_data;

  // action method put_data
  assign RDY_put_data = fifo_1$FULL_N && fifo_2$FULL_N ;
  assign CAN_FIRE_put_data = fifo_1$FULL_N && fifo_2$FULL_N ;
  assign WILL_FIRE_put_data = EN_put_data ;

  // actionvalue method get_data
  assign get_data = { fifo_1$D_OUT, fifo_2$D_OUT } ;
  assign RDY_get_data = fifo_1$EMPTY_N && fifo_2$EMPTY_N ;
  assign CAN_FIRE_get_data = fifo_1$EMPTY_N && fifo_2$EMPTY_N ;
  assign WILL_FIRE_get_data = EN_get_data ;

  // submodule fifo_1
  FIFO2 #(.width(32'd32), .guarded(1'd1)) fifo_1(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(fifo_1$D_IN),
						 .ENQ(fifo_1$ENQ),
						 .DEQ(fifo_1$DEQ),
						 .CLR(fifo_1$CLR),
						 .D_OUT(fifo_1$D_OUT),
						 .FULL_N(fifo_1$FULL_N),
						 .EMPTY_N(fifo_1$EMPTY_N));

  // submodule fifo_2
  FIFO2 #(.width(32'd32), .guarded(1'd1)) fifo_2(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(fifo_2$D_IN),
						 .ENQ(fifo_2$ENQ),
						 .DEQ(fifo_2$DEQ),
						 .CLR(fifo_2$CLR),
						 .D_OUT(fifo_2$D_OUT),
						 .FULL_N(fifo_2$FULL_N),
						 .EMPTY_N(fifo_2$EMPTY_N));

  // submodule fifo_1
  assign fifo_1$D_IN = put_data_a ;
  assign fifo_1$ENQ = EN_put_data ;
  assign fifo_1$DEQ = EN_get_data ;
  assign fifo_1$CLR = 1'b0 ;

  // submodule fifo_2
  assign fifo_2$D_IN = put_data_b ;
  assign fifo_2$ENQ = EN_put_data ;
  assign fifo_2$DEQ = EN_get_data ;
  assign fifo_2$CLR = 1'b0 ;
endmodule  // mk_fifo_example

